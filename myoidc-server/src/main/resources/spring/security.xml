<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:oauth2="http://www.springframework.org/schema/security/oauth2"
             xmlns:mvc="http://www.springframework.org/schema/mvc"
             xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
                        http://www.springframework.org/schema/security
                        http://www.springframework.org/schema/security/spring-security-4.2.xsd
                        http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-2.0.xsd
                        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">

    <!--<debug/>-->

    <!--static url pattern-->
    <!--<http pattern="/static/**" security="none"/>-->
    <!--Ignore /test,  /public -->
    <http pattern="/public/**" security="none"/>


    <!--<mvc:annotation-driven/>-->
    <mvc:annotation-driven/>
    <mvc:default-servlet-handler/>

    <mvc:annotation-driven ignore-default-model-on-redirect="true">
        <mvc:message-converters>
            <beans:bean class="org.springframework.http.converter.StringHttpMessageConverter"/>
            <beans:bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <mvc:interceptors>
        <mvc:interceptor>
            <!-- Exclude APIs and other machine-facing endpoints from these interceptors -->
            <mvc:mapping path="/**"/>
            <mvc:exclude-mapping path="/#{T(org.mitre.openid.connect.web.JWKSetPublishingEndpoint).URL}**"/>
            <mvc:exclude-mapping path="/#{T(org.mitre.discovery.web.DiscoveryEndpoint).WELL_KNOWN_URL}/**"/>
            <mvc:exclude-mapping path="/resources/**"/>
            <mvc:exclude-mapping path="/token**"/>
            <mvc:exclude-mapping path="/#{T(org.mitre.openid.connect.web.DynamicClientRegistrationEndpoint).URL}/**"/>
            <mvc:exclude-mapping
                    path="/#{T(org.mitre.openid.connect.web.ProtectedResourceRegistrationEndpoint).URL}/**"/>
            <mvc:exclude-mapping path="/#{T(org.mitre.openid.connect.web.UserInfoEndpoint).URL}**"/>
            <mvc:exclude-mapping path="/#{T(org.mitre.openid.connect.web.RootController).API_URL}/**"/>
            <mvc:exclude-mapping path="/#{T(org.mitre.oauth2.web.DeviceEndpoint).URL}/**"/>
            <mvc:exclude-mapping path="/#{T(org.mitre.oauth2.web.IntrospectionEndpoint).URL}**"/>
            <mvc:exclude-mapping path="/#{T(org.mitre.oauth2.web.RevocationEndpoint).URL}**"/>

            <!-- Inject the UserInfo into the response -->
            <beans:bean id="userInfoInterceptor" class="org.mitre.openid.connect.web.UserInfoInterceptor"/>
        </mvc:interceptor>
        <mvc:interceptor>
            <!-- Exclude APIs and other machine-facing endpoints from these interceptors -->
            <mvc:mapping path="/**"/>
            <mvc:exclude-mapping path="/#{T(org.mitre.openid.connect.web.JWKSetPublishingEndpoint).URL}**"/>
            <mvc:exclude-mapping path="/#{T(org.mitre.discovery.web.DiscoveryEndpoint).WELL_KNOWN_URL}/**"/>
            <mvc:exclude-mapping path="/resources/**"/>
            <mvc:exclude-mapping path="/token**"/>
            <mvc:exclude-mapping path="/#{T(org.mitre.openid.connect.web.DynamicClientRegistrationEndpoint).URL}/**"/>
            <mvc:exclude-mapping
                    path="/#{T(org.mitre.openid.connect.web.ProtectedResourceRegistrationEndpoint).URL}/**"/>
            <mvc:exclude-mapping path="/#{T(org.mitre.openid.connect.web.UserInfoEndpoint).URL}**"/>
            <mvc:exclude-mapping path="/#{T(org.mitre.openid.connect.web.RootController).API_URL}/**"/>
            <mvc:exclude-mapping path="/#{T(org.mitre.oauth2.web.DeviceEndpoint).URL}/**"/>
            <mvc:exclude-mapping path="/#{T(org.mitre.oauth2.web.IntrospectionEndpoint).URL}**"/>
            <mvc:exclude-mapping path="/#{T(org.mitre.oauth2.web.RevocationEndpoint).URL}**"/>
            <!-- Inject the server configuration into the response -->
            <beans:bean id="serverConfigInterceptor" class="org.mitre.openid.connect.web.ServerConfigInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>



    <!-- SPEL processors -->
    <global-method-security pre-post-annotations="enabled" proxy-target-class="true"
                            authentication-manager-ref="authenticationManager">
        <!--you could also wire in the expression handler up at the layer of the http filters. See https://jira.springsource.org/browse/SEC-1452 -->
        <expression-handler ref="oauthExpressionHandler"/>
    </global-method-security>

    <oauth2:expression-handler id="oauthExpressionHandler"/>

    <oauth2:web-expression-handler id="oauthWebExpressionHandler" />

    <!-- Spring Security configuration -->

    <oauth2:resource-server id="resourceServerFilter" token-services-ref="defaultOAuth2ProviderTokenService"
                            stateless="false"/>


    <http pattern="/token"
          create-session="stateless"
          authentication-manager-ref="clientAuthenticationManager"
          entry-point-ref="oauthAuthenticationEntryPoint"
          use-expressions="true">

        <intercept-url pattern="/token" access="permitAll"
                       method="OPTIONS"/> <!-- allow OPTIONS calls without auth for CORS stuff -->
        <intercept-url pattern="/token" access="isAuthenticated()"/>
        <http-basic entry-point-ref="oauthAuthenticationEntryPoint"/>
        <!-- include this only if you need to authenticate clients via request parameters -->
        <custom-filter ref="clientAssertionEndpointFilter" after="PRE_AUTH_FILTER"/> <!-- this one has to go first -->
        <custom-filter ref="clientCredentialsEndpointFilter" after="BASIC_AUTH_FILTER"/>
        <custom-filter ref="corsFilter" after="SECURITY_CONTEXT_FILTER"/>
        <access-denied-handler ref="oauthAccessDeniedHandler"/>
        <csrf disabled="true"/>
    </http>


    <!-- Allow open access to discovery endpoints -->
    <http pattern="/#{T(org.mitre.openid.connect.web.JWKSetPublishingEndpoint).URL}**" use-expressions="true"
          entry-point-ref="http403EntryPoint" create-session="stateless">
        <intercept-url pattern="/#{T(org.mitre.openid.connect.web.JWKSetPublishingEndpoint).URL}**" access="permitAll"/>
        <custom-filter ref="corsFilter" after="SECURITY_CONTEXT_FILTER"/>
        <csrf disabled="true"/>
    </http>
    <http pattern="/#{T(org.mitre.discovery.web.DiscoveryEndpoint).WELL_KNOWN_URL}/**" use-expressions="true"
          entry-point-ref="http403EntryPoint" create-session="stateless">
        <intercept-url pattern="/#{T(org.mitre.discovery.web.DiscoveryEndpoint).WELL_KNOWN_URL}/**" access="permitAll"/>
        <custom-filter ref="corsFilter" after="SECURITY_CONTEXT_FILTER"/>
        <csrf disabled="true"/>
    </http>

    <!-- Allow open access to all static resources -->
    <http pattern="/resources/**" use-expressions="true" entry-point-ref="http403EntryPoint" create-session="stateless">
        <intercept-url pattern="/resources/**" access="permitAll"/>
        <custom-filter ref="corsFilter" after="SECURITY_CONTEXT_FILTER"/>
        <csrf disabled="true"/>
    </http>


    <beans:bean id="oauthAuthenticationEntryPoint"
                class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <beans:property name="realmName" value="openidconnect"/>
    </beans:bean>

    <beans:bean id="http403EntryPoint"
                class="org.springframework.security.web.authentication.Http403ForbiddenEntryPoint"/>


    <oauth2:authorization-server
            client-details-service-ref="defaultOAuth2ClientDetailsEntityService"
            authorization-request-manager-ref="connectOAuth2RequestFactory"
            token-services-ref="defaultOAuth2ProviderTokenService"
            user-approval-handler-ref="tofuUserApprovalHandler"
            request-validator-ref="oauthRequestValidator"
            redirect-resolver-ref="blacklistAwareRedirectResolver"
            authorization-endpoint-url="/authorize"
            token-endpoint-url="/token"
            error-page="/error">

        <oauth2:authorization-code authorization-code-services-ref="defaultOAuth2AuthorizationCodeService"/>
        <oauth2:implicit/>
        <oauth2:refresh-token/>
        <oauth2:client-credentials/>
        <oauth2:custom-grant token-granter-ref="chainedTokenGranter"/>
        <oauth2:custom-grant token-granter-ref="jwtAssertionTokenGranter"/>
        <oauth2:custom-grant token-granter-ref="deviceTokenGranter"/>

    </oauth2:authorization-server>

    <beans:bean id="oauthAccessDeniedHandler"
                class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler"/>

    <beans:bean id="oauthRequestValidator" class="org.mitre.oauth2.token.ScopeServiceAwareOAuth2RequestValidator"/>

    <!-- Error page handler. -->
    <mvc:view-controller path="/error" view-name="error"/>


    <beans:bean id="oauth2ExceptionTranslator"
                class="org.springframework.security.oauth2.provider.error.DefaultWebResponseExceptionTranslator"/>

    <beans:bean id="clientAuthMatcher" class="org.mitre.openid.connect.filter.MultiUrlRequestMatcher">
        <beans:constructor-arg name="filterProcessesUrls">
            <beans:set>
                <beans:value>/introspect</beans:value>
                <beans:value>/revoke</beans:value>
                <beans:value>/token</beans:value>
            </beans:set>
        </beans:constructor-arg>
    </beans:bean>


    <beans:bean id="clientCredentialsEndpointFilter" class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
        <beans:property name="authenticationManager" ref="clientAuthenticationManager" />
        <beans:property name="requiresAuthenticationRequestMatcher" ref="clientAuthMatcher" />
    </beans:bean>

    <beans:bean id="clientAssertionEndpointFilter" class="org.mitre.openid.connect.assertion.JWTBearerClientAssertionTokenEndpointFilter">
        <beans:constructor-arg name="additionalMatcher" ref="clientAuthMatcher" />
        <beans:property name="authenticationManager" ref="clientAssertionAuthenticationManager" />
    </beans:bean>

    <authentication-manager id="clientAuthenticationManager">
        <authentication-provider user-service-ref="clientUserDetailsService" />
        <authentication-provider user-service-ref="uriEncodedClientUserDetailsService" />
    </authentication-manager>

    <authentication-manager id="clientAssertionAuthenticationManager">
        <authentication-provider ref="clientAssertionAuthenticationProvider" />
    </authentication-manager>

    <beans:bean id="clientAssertionAuthenticationProvider" class="org.mitre.openid.connect.assertion.JWTBearerAuthenticationProvider" />


    <authentication-manager id="authenticationManager">
        <authentication-provider>
            <jdbc-user-service data-source-ref="dataSource"/>
        </authentication-provider>
    </authentication-manager>

    <mvc:view-controller path="/login" view-name="login" />

    <http authentication-manager-ref="authenticationManager">

        <intercept-url pattern="/authorize" access="hasRole('ROLE_USER')" />
        <intercept-url pattern="/**" access="permitAll" />

        <form-login login-page="/login" authentication-failure-url="/login?error=failure" authentication-success-handler-ref="authenticationTimeStamper" />
        <custom-filter ref="authRequestFilter" after="SECURITY_CONTEXT_FILTER" />
        <logout logout-url="/logout" />
        <anonymous />
        <expression-handler ref="oauthWebExpressionHandler" />
        <headers>
            <frame-options policy="DENY" />
        </headers>
        <csrf />
    </http>


</beans:beans>